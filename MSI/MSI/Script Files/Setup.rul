////////////////////////////////////////////////////////////////////////////////
//                                                                            
//  This template script provides the code necessary to build an entry-point 
//  function to be called in an InstallScript custom action. 
//                                                                            
//                                                                            
//    File Name:  Setup.rul                                                   
//                                                                            
//  Description:  InstallShield script                                        
//
////////////////////////////////////////////////////////////////////////////////

// Include Ifx.h for built-in InstallScript function prototypes, for Windows 
// Installer API function prototypes and constants, and to declare code for 
// the OnBegin and OnEnd events.
#include "ifx.h"
#include "String.rul"

export prototype GetLicenseKey(HWND);
export prototype SaveLicenseKey(HWND);
export prototype GetHostnamePort(HWND);
export prototype SaveHostnamePort(HWND);
export prototype ParseHostnamePort(HWND);
export prototype GetUUID(HWND);
export prototype SaveUUID(HWND);

export prototype CreateApacheEnv(HWND);
export prototype CleanupInstallDir(HWND);
export prototype CleanupServices(HWND);

export prototype Setup(HWND);
export prototype PreStopService(HWND);

export prototype BOOL IsDomainController(HWND);

#define KEY "Software\\Palette"
#define PORT 22

#define SERVICE_NAME "PaletteAgent"

#define ADMIN_TYPE_CREATE_NEW   1
#define ADMIN_TYPE_USE_EXISTING 2

#define PRODUCT_TYPE_LANMANNT "LanmanNT"

// To Do:  Declare global variables, define constants, and prototype user-
//         defined and DLL functions here.


// To Do:  Create a custom action for this entry-point function:
// 1.  Right-click on "Custom Actions" in the Sequences/Actions view.
// 2.  Select "Custom Action Wizard" from the context menu.
// 3.  Proceed through the wizard and give the custom action a unique name.
// 4.  Select "Run InstallScript code" for the custom action type, and in
//     the next panel select "MyFunction" (or the new name of the entry-
//     point function) for the source.
// 5.  Click Next, accepting the default selections until the wizard
//     creates the custom action.
//
// Once you have made a custom action, you must execute it in your setup by
// inserting it into a sequence or making it the result of a dialog's
// control event.

///////////////////////////////////////////////////////////////////////////////
//                                                                           
// Function:  GetLicenseKey
// 
// Retrieve a previously used license key from the registry and save it
// in the LICENSEKEY property.
//                                                                           
///////////////////////////////////////////////////////////////////////////////
function GetLicenseKey(hMSI)
    NUMBER nResult, nvSize, nvType;
    STRING szLicenseKey;
begin
	MsiGetProperty(hMSI, "LICENSEKEY", szLicenseKey, nvSize);
	if (nvSize > 0) then
		// LICENSEKEY was specified on the command line.
		return ERROR_SUCCESS;
	endif;

	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	if (!RegDBKeyExist(KEY)) then
		return ERROR_SUCCESS;
	endif;
	
	nvType = REGDB_STRING;
	
	nResult = RegDBGetKeyValueEx(KEY, "LicenseKey", nvType, szLicenseKey, nvSize);
	if (nResult < 0) then
		SprintfMsiLog("LicenseKey not found in registry: %s\n", FormatMessage(nResult));
		return ERROR_SUCCESS;
	endif;

    MsiSetProperty(hMSI, "LICENSEKEY", szLicenseKey);
end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           
// Function:  GetHostnamePort
// 
// Retrieve a previously used hostname and/or port from the registry and save it
// in the HOSTNAMEPORT property.
//                                                                           
///////////////////////////////////////////////////////////////////////////////
function GetHostnamePort(hMSI)
    NUMBER nResult, nvSize, nPort, nType;
    STRING szHostnamePort, szHostname, svPort;
begin

	nPort = PORT;
	nType = REGDB_STRING;

	// FIXME: check if HOSTNAME <> "" i.e. it was passed on the command line.

	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	if (!RegDBKeyExist(KEY)) then
		return ERROR_SUCCESS;
	endif;
	
	nResult = RegDBGetKeyValueEx(KEY, "Hostname", nType, szHostname, nvSize);
	if (nResult < 0) then
		SprintfMsiLog("Hostname not found in registry: %s\n", FormatMessage(nResult));
		return ERROR_SUCCESS;
	endif;
	
	nType = REGDB_NUMBER;
	
	nResult = RegDBGetKeyValueEx(KEY, "Port", nType, svPort, nvSize);
	if (nResult == 0) then
		StrToNum(nPort, svPort);
	endif;
	
	if (nPort != PORT) then
		szHostnamePort = szHostname + ":" + svPort;
	else
		szHostnamePort = szHostname;
	endif;

    MsiSetProperty(hMSI, "HostnamePort", szHostnamePort);
end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           
// Function:  SaveLicenseKey
// 
// Store the license key in the registry so that on re-install it may be
// used to pre-populate the license key dialog.
//                                                                           
///////////////////////////////////////////////////////////////////////////////
function SaveLicenseKey(hMSI)
	NUMBER nResult, nvSize, nType;
	STRING svLicenseKey, svMsg;
begin

	nType = REGDB_STRING;

	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);

	MsiGetProperty(hMSI, "LICENSEKEY", svLicenseKey, nvSize);
	if (nvSize == 0) then
		// FIXME: this should be impossible.
		return ERROR_SUCCESS;
	endif;
	
	if (!RegDBKeyExist(KEY)) then
		nResult = RegDBCreateKeyEx(KEY, "");
		if (nResult < 0) then
			Sprintf(svMsg, "Failed to create Registry key '%s'\n%s", KEY, FormatMessage(nResult));
			MessageBox(svMsg, SEVERE);
			abort;
		endif;
	endif;
	
	nResult = RegDBSetKeyValueEx(KEY, "LicenseKey", nType, svLicenseKey, nvSize);
	if (nResult < 0) then
		Sprintf(svMsg, "Failed to set Registry value 'LICENSEKEY'\n%s", FormatMessage(nResult));
		MessageBox(svMsg, SEVERE);
		abort;
	endif;
end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           
// Function:  ParseHostnamePort
// 
// Parse the hostname:port value if present and remove the 'scheme' if the
// value is (incorrectly) entered as a URL.
//                                                                           
///////////////////////////////////////////////////////////////////////////////
function ParseHostnamePort(hMSI)
	STRING svHostnamePort, svHostname, svPort;
	NUMBER nSize, nIndex, nPort;
begin
	NumToStr(svPort, PORT);

	MsiGetProperty(hMSI, "HostnamePort", svHostnamePort, nSize);
	svHostnamePort = StrLower(svHostnamePort);
	if (StrLengthChars(svHostnamePort) == 0) then
		MessageBox("Hostname is required.", SEVERE);
		return ERROR_SUCCESS;
	endif;
	
	if (StrStartsWith(svHostnamePort, "http://") || StrStartsWith(svHostnamePort, "https://")) then
		MessageBox("The hostname value should not be a URL.", SEVERE);
		return ERROR_SUCCESS;
	endif;
	
	nIndex = StrFindEx(svHostnamePort, ":", 0);
	if (nIndex >= 0) then
		StrSub(svPort, svHostnamePort, nIndex + 1, nSize - (nIndex + 1));
		StrSub(svHostname, svHostnamePort, 0, nIndex);
		nSize = nIndex;
	else
		svHostname = svHostnamePort;
	endif;
	
	StrToNum(nPort, svPort);
	if (nPort < 0) then
		MessageBox("Invalid port specified, using default port.", SEVERE);
		NumToStr(svPort, PORT);
	endif;
	
	MsiSetProperty(hMSI, "PORT", svPort);
	MsiSetProperty(hMSI, "HOSTNAME", svHostname);
end;

///////////////////////////////////////////////////////////////////////////////
//                                                                           
// Function:  SaveHostnamePort
// 
// Store the hostname and port in the registry so that on re-install it may be
// used to pre-populate the hostname dialog.
//                                                                           
///////////////////////////////////////////////////////////////////////////////
function SaveHostnamePort(hMSI)
	NUMBER nResult, nvSize, nType;
	STRING svValue, svMsg;
begin

	nType = REGDB_STRING;
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	if (!RegDBKeyExist(KEY)) then
		nResult = RegDBCreateKeyEx(KEY, "");
		if (nResult < 0) then
			Sprintf(svMsg, "Failed to create Registry key '%s'\n%s", KEY, FormatMessage(nResult));
			MessageBox(svMsg, SEVERE);
			abort;
		endif;
	endif;
	
	MsiGetProperty(hMSI, "HOSTNAME", svValue, nvSize);
	if (nvSize == 0) then
		// FIXME: this should be impossible.
		return ERROR_SUCCESS;
	endif;
	
	nResult = RegDBSetKeyValueEx(KEY, "Hostname", nType, svValue, nvSize);
	if (nResult < 0) then
		Sprintf(svMsg, "Failed to set Registry value 'Hostname'\n%s", FormatMessage(nResult));
		MessageBox(svMsg, SEVERE);
		abort;
	endif;
	
	MsiGetProperty(hMSI, "PORT", svValue, nvSize);
	if (nvSize == 0) then
		// FIXME: this should be impossible.
		return ERROR_SUCCESS;
	endif;
	
	nType = REGDB_NUMBER;
	
	nResult = RegDBSetKeyValueEx(KEY, "Port", nType, svValue, nvSize);
	if (nResult < 0) then
		Sprintf(svMsg, "Failed to set Registry value 'Port'\n%s", FormatMessage(nResult));
		MessageBox(svMsg, SEVERE);
		abort;
	endif;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  GetUUID
//
// Retrieve the system UUID from the registry;
//
///////////////////////////////////////////////////////////////////////////////
function GetUUID(hMSI)
	NUMBER nResult, nvSize, nType;
	STRING svUuid, svMsg;
begin
	MsiGetProperty(hMSI, "UUID", svUuid, nvSize);
	if (nvSize > 0) then
		// UUID was specified on the command line.
		return ERROR_SUCCESS;
	endif;

	nType = REGDB_STRING;
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);

	nResult = RegDBGetKeyValueEx(KEY, "UUID", nType, svUuid, nvSize);
	if (nResult == 0) then
		MsiSetProperty(hMSI, "UUID", svUuid);
	endif;

end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  SaveUUID
//
// Store the system UUID in the registry
//
///////////////////////////////////////////////////////////////////////////////
function SaveUUID(hMSI)
	NUMBER nResult, nvSize, nType;
	STRING svUuid, svMsg;
begin
	MsiGetProperty(hMSI, "UUID", svUuid, nvSize);

	nType = REGDB_STRING;
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);

	if (!RegDBKeyExist(KEY)) then
		nResult = RegDBCreateKeyEx(KEY, "");
		if (nResult < 0) then
			Sprintf(svMsg, "Failed to create Registry key '%s'\n%s", KEY, FormatMessage(nResult));
			MessageBox(svMsg, SEVERE);
			abort;
		endif;
	endif;

	nResult = RegDBSetKeyValueEx(KEY, "UUID", nType, svUuid, nvSize);
	if (nResult < 0) then
		Sprintf(svMsg, "Failed to set Registry value 'UUID'\n%s", FormatMessage(nResult));
		MessageBox(svMsg, SEVERE);
		abort;
	endif;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  CreateApacheEnv
//
// Creates the env.conf that setups up Apache2 for maint and archive.
//
///////////////////////////////////////////////////////////////////////////////
function CreateApacheEnv(hMSI)
	NUMBER nResult, nvFileHandle, nvSize;
	STRING svPath, szFileName, svInstallDir, svMsg, svLine;
begin
	nResult = MsiGetProperty(hMSI, "CustomActionData", svInstallDir, nvSize);
	if (nResult < 0) then
		Sprintf(svMsg, "Failed to get INSTALLDIR when creating Apache2 env.conf\n%s", FormatMessage(nResult));
		MessageBox(svMsg, SEVERE);
		abort;
	endif;
	
	svPath = svInstallDir ^ "apache2" ^ "conf";
	szFileName = "env.conf";
	
	OpenFileMode(FILE_MODE_NORMAL);
	
	nResult = CreateFile(nvFileHandle, svPath, szFileName);
	if (nResult < 0) then
		Sprintf(svMsg, "Failed to write '%s\\%s'\n%s", svPath, szFileName, FormatMessage(nResult));
		MessageBox(svMsg, SEVERE);
		abort;
	endif;
	
	StrRemoveLastSlash(svInstallDir);
	Sprintf(svLine, "Define INSTALLDIR \"%s\"", svInstallDir);
	WriteLine(nvFileHandle, svLine);
	Sprintf(svLine, "Define DATADIR \"%s\"", svInstallDir);
	WriteLine(nvFileHandle, svLine);
	
	CloseFile(nvFileHandle);
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  CleanupInstallDir
//
// Remove autogenerated files not handled by the installer itself.
//
///////////////////////////////////////////////////////////////////////////////
function CleanupInstallDir(hMSI)
	NUMBER nResult, nvSize;
	STRING svInstallDir, svProductCode, szPath, svMsg;
begin
	nResult = MsiGetProperty(hMSI, "ProductCode", svProductCode, nvSize);
	if (nResult < 0) then
		Sprintf(svMsg, "Failed to get ProductCode during cleanup\n%s", FormatMessage(nResult));
		MessageBox(svMsg, SEVERE);
		return ERROR_SUCCESS;
	endif;
	
	nvSize = MAX_PATH + 1;
	nResult = MsiGetProductInfo(svProductCode, INSTALLPROPERTY_INSTALLLOCATION, svInstallDir, nvSize);
	if (nResult < 0) then
		Sprintf(svMsg, "Failed to get INSTALLDIR during cleanup\n%s", FormatMessage(nResult));
		MessageBox(svMsg, SEVERE);
		return ERROR_SUCCESS;
	endif;
	
	szPath = svInstallDir ^ "XID";
	DeleteDir(szPath, ALLCONTENTS);
		
	szPath = svInstallDir ^ "apache2" ^ "conf" ^ "env.conf";
	DeleteFile(szPath);
	
	szPath = svInstallDir ^ "logs";
	DeleteDir(szPath, ALLCONTENTS);
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  CleanupServices
//
// Remove any Apache2 services that are running/installed.
//
///////////////////////////////////////////////////////////////////////////////
function CleanupServices(hMSI)
	NUMBER nResult, nvSize;
	STRING szServiceName, szPath, svMsg;
begin
	szServiceName = "PaletteArchiveServer";
	if (ServiceExistsService(szServiceName)) then
		ServiceStopService(szServiceName);
		ServiceRemoveService(szServiceName);
	endif;

	szServiceName = "PaletteMaintenanceWebserver";
	if (ServiceExistsService(szServiceName)) then
		ServiceStopService(szServiceName);
		ServiceRemoveService(szServiceName);
	endif;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  Setup
//
// Setup the ACCOUNT & PASSWORD properties.
//
///////////////////////////////////////////////////////////////////////////////
function Setup(hMSI)
	NUMBER nvSize, nAdminType;
	STRING svPropertyValue, svMsg;
begin
	// FIXME: handle specifying the admin user on the command line.
	
	nvSize = 0;
	MsiGetProperty(hMSI, "ACCOUNT", svPropertyValue, nvSize);
	if (nvSize > 0) then
		// ACCOUNT was specified on the command line.
		NumToStr(svPropertyValue, ADMIN_TYPE_USE_EXISTING);
		MsiSetProperty(hMSI, "AdminType", svPropertyValue);
	endif;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  IsDomainController
//
// Returns TRUE if this machine is a Domain Controller.
//
///////////////////////////////////////////////////////////////////////////////
function BOOL IsDomainController(hMSI)
	NUMBER nvSize, nResult;
	STRING svProductType;
begin
	nResult = MsiGetProperty(hMSI, "ProductType", svProductType, nvSize);
	if (nResult < 0) then
		MessageBox("Failed to get 'ProductType' property ?!", SEVERE);
		abort;
	endif;

	if (svProductType == PRODUCT_TYPE_LANMANNT) then
		return TRUE;
	endif;

	return FALSE;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  PreStopService
//
// Stop the service before InstallValidate to avoid the error dialog:
//   "The following appications should be closed before continuing..."
//
///////////////////////////////////////////////////////////////////////////////
function PreStopService(hMSI)
begin
	ServiceStopService(SERVICE_NAME);
end;
